name: Docker Image CI

on:
  pull_request:
    branches:
      - main

jobs:

  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      #- name: Build and push
        #uses: docker/build-push-action@v2.10.0
        #with:
          #context: ./wordpress/
          #push: true
          #tags: dmitronik/wordpress:latest

  terraform:
    needs: build
    name: "Terraform"
    runs-on: ubuntu-20.04
    outputs:
      public_ip: ${{ steps.out_ip.outputs.public_ip }}
    defaults:
      run:
        working-directory: "./terraform"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

#      - name: Terraform Format
#        id: fmt
#        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false

      - name: Call terraform output
        id: out_ip
        run: |
          host=$(terraform output -raw instance_public_ip)
          echo "::set-output name=public_ip::$host"

  deploy_to_stage:
    needs: terraform
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Deploy in STAGE
        env:
          PRIVATE_KEY: ${{ secrets.EC2_STAGE_KEY  }}
          HOSTNAME: ${{ needs.terraform.outputs.public_ip }}
          USER_NAME: ${{ secrets.EC2_STAGE_USER_NAME  }}
        run: |
          echo  ${HOSTNAME}
          set -eu
          mkdir "$HOME/.ssh"
          echo "$PRIVATE_KEY" > "$HOME/.ssh/key"
          chmod 600 "$HOME/.ssh/key"
          rsync -e "ssh -i $HOME/.ssh/key -o StrictHostKeyChecking=no" \
            --archive --compress --delete ./wordpress/ ${USER_NAME}@${HOSTNAME}:~/wordpress
          ssh -i $HOME/.ssh/key -o StrictHostKeyChecking=no ${USER_NAME}@${HOSTNAME} \
            'bash -s' << 'ENDSSH'
              while :
              do
                if hash docker compose 2>/dev/null; then
                  echo Docker compose - found
                  sleep 5;
                  STATUS=0
                  break
                else
                  echo ------
                  echo Docker compose not found - sleep 10s
                  sleep 10;
                fi
              done
              cd ~/wordpress
              sudo docker compose -f compose-production.yml up -d
              exit $STATUS
            ENDSSH

  tests:
    needs:
      - terraform
      - deploy_to_stage
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Test url
        id: testurl
        env:
          URL: ${{ needs.terraform.outputs.public_ip }}
        run: ./checkurl.sh ${URL}
        continue-on-error: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform destroy
        run: terraform destroy -auto-approve -input=false
        working-directory: ./terraform

      - name: Test status
        if: steps.testurl.outcome == 'failure'
        run: exit 1
